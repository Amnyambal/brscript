// ==UserScript==
// @name         Black Log: House Helper (Прокси-версия)
// @namespace    http://tampermonkey.net/
// @version      7.0
// @description  Идеальная версия, которая обходит CORS с помощью прокси и работает в любом расширении.
// @author       You & AI
// @match        https://logs.blackrussia.online/gslogs/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    // --- 1. ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ---

    function addStyle(css) {
        const style = document.createElement('style');
        style.textContent = css;
        document.head.appendChild(style);
    }

    /**
     * Функция загрузки данных через публичный CORS-прокси.
     * Это единственный способ обойти блокировку без Tampermonkey.
     */
    function fetchData(originalUrl) {
        // Используем бесплатный прокси-сервис allorigins.win
        const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(originalUrl)}`;

        return fetch(proxyUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Сетевая ошибка прокси: ${response.status}`);
                }
                return response.text();
            })
            .then(text => {
                // Проверяем, не вернул ли прокси ошибку в виде JSON
                try {
                    const errorCheck = JSON.parse(text);
                    if (errorCheck && errorCheck.contents && errorCheck.contents.includes('error')) {
                         throw new Error('Прокси не смог загрузить данные.');
                    }
                } catch(e) {
                    // Если это не JSON, значит, все в порядке, это наш JS-код
                }
                const arrayString = text.substring(text.indexOf('['));
                return new Function(`return ${arrayString}`)();
            });
    }

    // --- 2. СТИЛИ И UI ---
    addStyle(`
        :root {
            --blh-bg-main: rgba(26, 26, 26, 0.7);
            --blh-text-primary: #ffffff;
            --blh-text-secondary: #cccccc;
            --blh-text-highlight: #2b8cff;
            --blh-primary-gradient: linear-gradient(145deg, #0d6efd, #0a58ca);
            --blh-border-color: rgba(255, 255, 255, 0.1);
            --blh-shadow: 0 10px 35px rgba(0,0,0,.5);
            --blh-radius: 12px;
            --blh-font-family: 'Segoe UI', sans-serif;
            --blh-transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .blh-info-button {
            background: var(--blh-primary-gradient); color: white; border: none;
            padding: 4px 10px; margin-left: 8px; font-size: 12px; border-radius: 8px;
            cursor: pointer; transition: transform var(--blh-transition), box-shadow var(--blh-transition);
            vertical-align: middle;
        }
        .blh-info-button:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(43, 140, 255, 0.3); }
        .blh-modal-overlay {
            position: fixed; inset: 0; background: rgba(0,0,0,.6); z-index: 9999;
            backdrop-filter: blur(4px); opacity: 0; transition: opacity var(--blh-transition); pointer-events: none;
        }
        .blh-modal-overlay.visible { opacity: 1; pointer-events: auto; }
        .blh-wrapper {
            position: fixed; z-index: 10000; inset: 0; display: flex;
            justify-content: center; align-items: center; padding: 16px;
        }
        .blh-modal {
            background: var(--blh-bg-main); color: var(--blh-text-primary); box-shadow: var(--blh-shadow);
            width: 95%; max-width: 600px; max-height: 90vh; overflow: hidden; display: flex; flex-direction: column;
            font-family: var(--blh-font-family); border: 1px solid var(--blh-border-color);
            backdrop-filter: blur(15px); border-radius: var(--blh-radius); opacity: 0;
            transform: scale(0.95); transition: opacity var(--blh-transition), transform var(--blh-transition);
        }
        .blh-wrapper.visible .blh-modal { opacity: 1; transform: scale(1); }
        .blh-modal-header {
            display: flex; justify-content: space-between; align-items: center;
            padding: 16px 24px; border-bottom: 1px solid var(--blh-border-color); cursor: move;
        }
        .blh-modal-title { font-size: 18px; font-weight: 600; color: var(--blh-text-highlight); margin: 0; }
        .blh-modal-close {
            background: transparent; border: none; color: var(--blh-text-secondary);
            font-size: 28px; line-height: 1; padding: 0 8px; cursor: pointer;
            transition: color var(--blh-transition), transform var(--blh-transition);
        }
        .blh-modal-close:hover { color: #fff; transform: rotate(90deg); }
        .blh-modal-content { overflow-y: auto; padding: 24px; }
        .blh-modal-content p { margin: 0 0 14px; font-size: 1.1rem; line-height: 1.6; display: flex; }
        .blh-modal-content strong { color: #87ceeb; min-width: 160px; display: inline-block; }
    `);

    // --- 3. ХРАНИЛИЩЕ ДАННЫХ И UI ---
    let houses = [];
    let apartments = [];
    let isDataLoaded = false;

    function createModal(info, type) {
        const modalId = `${type}-${info.id}`;
        if (document.querySelector(`.blh-wrapper[data-id='${modalId}']`)) return;
        const overlay = document.createElement("div");
        overlay.className = "blh-modal-overlay";
        const wrapper = document.createElement("div");
        wrapper.className = "blh-wrapper";
        wrapper.dataset.id = modalId;
        const modal = document.createElement("div");
        modal.className = "blh-modal";
        let titleText = type === 'house' ? `Дом #${info.id}` : `Квартира #${info.id}`;
        let contentHtml = '';
        if (type === 'house') {
            contentHtml = `<p><strong>Класс:</strong> ${info.class||'Не указан'}</p><p><strong>Цена:</strong> ${info.price.toLocaleString('ru-RU')} ₽</p><p><strong>Гараж:</strong> ${info.garage?'Есть':'Нет'}</p><p><strong>Мест в гараже:</strong> ${info.garageslots||0}</p>`;
        } else {
            contentHtml = `<p><strong>Название ЖК:</strong> ${info.name||'Не указано'}</p><p><strong>Класс:</strong> ${info.class||'Не указан'}</p><p><strong>Цена:</strong> ${info.price.toLocaleString('ru-RU')} ₽</p>`;
        }
        modal.innerHTML = `<div class="blh-modal-header"><h3 class="blh-modal-title">${titleText}</h3><button class="blh-modal-close" aria-label="Закрыть">&times;</button></div><div class="blh-modal-content">${contentHtml}</div>`;
        wrapper.appendChild(modal);
        document.body.appendChild(overlay);
        document.body.appendChild(wrapper);
        requestAnimationFrame(() => {
            overlay.classList.add('visible');
            wrapper.classList.add('visible');
        });
        const closeModal = () => {
            wrapper.classList.remove('visible');
            overlay.classList.remove('visible');
            wrapper.addEventListener('transitionend', () => {
                wrapper.remove();
                overlay.remove();
                document.removeEventListener('keydown', handleEscKey);
            }, { once: true });
        };
        const handleEscKey = (e) => e.key === 'Escape' && closeModal();
        overlay.addEventListener('click', closeModal);
        modal.querySelector('.blh-modal-close').addEventListener('click', closeModal);
        document.addEventListener('keydown', handleEscKey);
        const header = modal.querySelector('.blh-modal-header');
        let isDragging = false, initialX, initialY;
        header.addEventListener('mousedown', (e) => {
            if (e.target.classList.contains('blh-modal-close')) return;
            const rect = wrapper.getBoundingClientRect();
            initialX = e.clientX - rect.left;
            initialY = e.clientY - rect.top;
            isDragging = true;
            document.body.style.userSelect = 'none';
        });
        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                wrapper.style.left = `${e.clientX - initialX}px`;
                wrapper.style.top = `${e.clientY - initialY}px`;
                wrapper.style.transform = 'none';
            }
        });
        document.addEventListener('mouseup', () => {
            isDragging = false;
            document.body.style.userSelect = '';
        });
    }

    // --- 4. ОСНОВНАЯ ЛОГИКА (КАК В ТРЕЙДАХ) ---
    function attachHouseButtons() {
        if (!isDataLoaded) return;
        const propertyRegex = /(дом|квартира) \(sql: (\d+)\)/g;
        document.querySelectorAll('td:not([data-blh-processed])').forEach(td => {
            if (td.textContent.includes(' (sql: ')) {
                const matches = [...td.innerHTML.matchAll(propertyRegex)];
                const uniqueProperties = new Map();
                matches.forEach(match => {
                    const fullText = match[0];
                    const type = match[1] === 'дом' ? 'house' : 'apartment';
                    const sqlId = parseInt(match[2], 10);
                    uniqueProperties.set(fullText, { type, sqlId });
                });
                uniqueProperties.forEach(({ type, sqlId }, fullText) => {
                    if (td.querySelector(`.blh-info-button[data-id='${sqlId}']`)) return;
                    const btn = document.createElement('button');
                    btn.className = 'blh-info-button';
                    btn.dataset.id = sqlId;
                    btn.textContent = `Инфо #${sqlId}`;
                    btn.onclick = (e) => {
                        e.stopPropagation();
                        const dataArray = type === 'house' ? houses : apartments;
                        const info = dataArray.find(item => item.id === sqlId);
                        if (info) {
                            createModal(info, type);
                        } else {
                            alert(`Информация для ID ${sqlId} не найдена.`);
                        }
                    };
                    td.appendChild(btn);
                });
            }
            td.dataset.blhProcessed = 'true';
        });
    }

    // --- 5. ИНИЦИАЛИЗАЦИЯ ---
    console.log('[BLH Прокси] Скрипт запущен. Загрузка данных...');
    Promise.all([
        fetchData('https://omni-base.netlify.app/js/house.js'),
        fetchData('https://omni-base.netlify.app/js/apartments.js')
    ]).then(([houseData, apartmentData]) => {
        houses = houseData;
        apartments = apartmentData;
        isDataLoaded = true;
        console.log(`[BLH Прокси] Данные загружены: ${houses.length} домов, ${apartments.length} квартир.`);
        attachHouseButtons();
        setInterval(attachHouseButtons, 1500);
    }).catch(error => {
        console.error("[BLH Прокси] Критическая ошибка:", error);
        alert("Не удалось загрузить данные о недвижимости через прокси. Сервис-посредник может быть временно недоступен.");
    });

})();
