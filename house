// ==UserScript==
// @name         Black Log: House & Apartment Helper (BR-Ext Compatible)
// @namespace    http://tampermonkey.net/
// @version      3.2
// @description  Версия, совместимая с расширением BR Scripts Loader.
// @author       You
// @match        https://logs.blackrussia.online/gslogs/*
// @connect      omni-base.netlify.app
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    /**
     * Стандартная функция для добавления CSS на страницу.
     * Она заменяет GM_addStyle, которой нет в вашем расширении.
     */
    function addStyle(css) {
        const style = document.createElement('style');
        style.textContent = css;
        document.head.appendChild(style);
    }

    // -------------------
    // 1. СТИЛИ И ИНТЕРФЕЙС
    // -------------------
    addStyle(`
        :root {
            --blh-bg-main: rgba(26, 26, 26, 0.7);
            --blh-text-primary: #ffffff;
            --blh-text-secondary: #cccccc;
            --blh-text-highlight: #2b8cff;
            --blh-primary-gradient: linear-gradient(145deg, #0d6efd, #0a58ca);
            --blh-border-color: rgba(255, 255, 255, 0.1);
            --blh-shadow: 0 10px 35px rgba(0,0,0,.5);
            --blh-radius: 12px;
            --blh-font-family: 'Segoe UI', sans-serif;
            --blh-transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .blh-info-button {
            background: var(--blh-primary-gradient);
            color: white;
            border: none;
            padding: 4px 10px;
            margin: 0 2px;
            font-size: 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: transform var(--blh-transition), box-shadow var(--blh-transition);
        }
        .blh-info-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(43, 140, 255, 0.3);
        }

        .blh-modal-overlay {
            position: fixed; inset: 0;
            background: rgba(0,0,0,.6);
            z-index: 9999;
            backdrop-filter: blur(4px);
            opacity: 0;
            transition: opacity var(--blh-transition);
            pointer-events: none;
        }
        .blh-modal-overlay.visible { opacity: 1; pointer-events: auto; }

        .blh-wrapper {
            position: fixed; z-index: 10000; inset: 0;
            display: flex; justify-content: center; align-items: center;
            padding: 16px;
        }

        .blh-modal {
            background: var(--blh-bg-main);
            color: var(--blh-text-primary);
            box-shadow: var(--blh-shadow);
            width: 95%; max-width: 600px;
            max-height: 90vh;
            overflow: hidden;
            display: flex; flex-direction: column;
            font-family: var(--blh-font-family);
            border: 1px solid var(--blh-border-color);
            backdrop-filter: blur(15px);
            border-radius: var(--blh-radius);
            opacity: 0;
            transform: scale(0.95);
            transition: opacity var(--blh-transition), transform var(--blh-transition);
        }
        .blh-wrapper.visible .blh-modal { opacity: 1; transform: scale(1); }

        .blh-modal-header {
            display: flex; justify-content: space-between; align-items: center;
            padding: 16px 24px;
            border-bottom: 1px solid var(--blh-border-color);
            cursor: move; /* Для перетаскивания */
        }
        .blh-modal-title { font-size: 18px; font-weight: 600; color: var(--blh-text-highlight); margin: 0; }
        .blh-modal-close {
            background: transparent; border: none; color: var(--blh-text-secondary);
            font-size: 28px; line-height: 1; padding: 0 8px; cursor: pointer;
            transition: color var(--blh-transition), transform var(--blh-transition);
        }
        .blh-modal-close:hover { color: #fff; transform: rotate(90deg); }

        .blh-modal-content {
            overflow-y: auto; padding: 24px;
        }
        .blh-modal-content p {
            margin: 0 0 14px; font-size: 1.1rem; line-height: 1.6;
            display: flex;
        }
        .blh-modal-content strong {
            color: #87ceeb; min-width: 160px; display: inline-block;
        }
    `);

    // -------------------
    // 2. ЗАГРУЗКА ДАННЫХ (Используется GM_xmlhttpRequest из вашего расширения)
    // -------------------
    let houses = [];
    let apartments = [];
    let isDataLoaded = false;

    function fetchData(url) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: "GET", url,
                onload: res => {
                    if (res.status >= 200 && res.status < 300) {
                        try {
                            const text = res.responseText;
                            const arrayString = text.substring(text.indexOf('['));
                            resolve(new Function(`return ${arrayString}`)());
                        } catch (e) { reject(e); }
                    } else { reject(new Error(`HTTP error ${res.status}`)); }
                },
                onerror: err => reject(err)
            });
        });
    }

    // -------------------
    // 3. СОЗДАНИЕ МОДАЛЬНОГО ОКНА
    // -------------------
    function createModal(info, type) {
        const modalId = `${type}-${info.id}`;
        if (document.querySelector(`.blh-wrapper[data-id='${modalId}']`)) return;

        const overlay = document.createElement("div");
        overlay.className = "blh-modal-overlay";

        const wrapper = document.createElement("div");
        wrapper.className = "blh-wrapper";
        wrapper.dataset.id = modalId;

        const modal = document.createElement("div");
        modal.className = "blh-modal";

        let titleText = type === 'house' ? `Дом #${info.id}` : `Квартира #${info.id}`;
        let contentHtml = '';

        if (type === 'house') {
            contentHtml = `
                <p><strong>Класс:</strong> ${info.class || 'Не указан'}</p>
                <p><strong>Цена:</strong> ${info.price.toLocaleString('ru-RU')} ₽</p>
                <p><strong>Гараж:</strong> ${info.garage ? 'Есть' : 'Нет'}</p>
                <p><strong>Мест в гараже:</strong> ${info.garageslots || 0}</p>
            `;
        } else {
            contentHtml = `
                <p><strong>Название ЖК:</strong> ${info.name || 'Не указано'}</p>
                <p><strong>Класс:</strong> ${info.class || 'Не указан'}</p>
                <p><strong>Цена:</strong> ${info.price.toLocaleString('ru-RU')} ₽</p>
            `;
        }

        modal.innerHTML = `
            <div class="blh-modal-header">
                <h3 class="blh-modal-title">${titleText}</h3>
                <button class="blh-modal-close" aria-label="Закрыть">&times;</button>
            </div>
            <div class="blh-modal-content">${contentHtml}</div>
        `;

        wrapper.appendChild(modal);
        document.body.appendChild(overlay);
        document.body.appendChild(wrapper);

        requestAnimationFrame(() => {
            overlay.classList.add('visible');
            wrapper.classList.add('visible');
        });

        const closeModal = () => {
            wrapper.classList.remove('visible');
            overlay.classList.remove('visible');
            wrapper.addEventListener('transitionend', () => {
                wrapper.remove();
                overlay.remove();
                document.removeEventListener('keydown', handleEscKey);
            }, { once: true });
        };

        const handleEscKey = (e) => e.key === 'Escape' && closeModal();
        overlay.addEventListener('click', closeModal);
        modal.querySelector('.blh-modal-close').addEventListener('click', closeModal);
        document.addEventListener('keydown', handleEscKey);

        const header = modal.querySelector('.blh-modal-header');
        let isDragging = false, initialX, initialY;
        header.addEventListener('mousedown', (e) => {
            if (e.target.classList.contains('blh-modal-close')) return;
            const rect = wrapper.getBoundingClientRect();
            initialX = e.clientX - rect.left;
            initialY = e.clientY - rect.top;
            isDragging = true;
            document.body.style.userSelect = 'none';
        });
        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                wrapper.style.left = `${e.clientX - initialX}px`;
                wrapper.style.top = `${e.clientY - initialY}px`;
                wrapper.style.transform = 'none';
            }
        });
        document.addEventListener('mouseup', () => {
            isDragging = false;
            document.body.style.userSelect = '';
        });
    }

    // -------------------
    // 4. ОСНОВНАЯ ЛОГИКА
    // -------------------
    function enhanceNode(node) {
        const regex = /(дом|квартира) \(sql: (\d+)\)/g;
        const parent = node.parentNode;
        if (!parent || ['BUTTON', 'STYLE', 'SCRIPT'].includes(parent.nodeName)) return;

        const matches = [...node.textContent.matchAll(regex)];
        if (matches.length === 0) return;

        const fragment = document.createDocumentFragment();
        let lastIndex = 0;

        matches.forEach(match => {
            const type = match[1] === 'дом' ? 'house' : 'apartment';
            const sqlId = parseInt(match[2], 10);

            fragment.appendChild(document.createTextNode(node.textContent.slice(lastIndex, match.index)));

            const btn = document.createElement('button');
            btn.className = 'blh-info-button';
            btn.textContent = match[0];
            btn.onclick = (e) => {
                e.stopPropagation();
                const dataArray = type === 'house' ? houses : apartments;
                const info = dataArray.find(item => item.id === sqlId);
                if (info) {
                    createModal(info, type);
                } else {
                    alert(`Информация для ID ${sqlId} не найдена.`);
                }
            };
            fragment.appendChild(btn);
            lastIndex = match.index + match[0].length;
        });

        fragment.appendChild(document.createTextNode(node.textContent.slice(lastIndex)));
        parent.replaceChild(fragment, node);
    }

    function scanAndProcess(targetNode) {
        if (!isDataLoaded) return;
        const walker = document.createTreeWalker(targetNode, NodeFilter.SHOW_TEXT, {
            acceptNode: (node) => (node.textContent.includes(' (sql: ') ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT)
        });
        const nodes = [];
        while (walker.nextNode()) nodes.push(walker.currentNode);
        nodes.forEach(enhanceNode);
    }

    // -------------------
    // 5. ИНИЦИАЛИЗАЦИЯ
    // -------------------
    console.log('[BLH Compatible] Скрипт запущен. Загрузка данных...');
    Promise.all([
        fetchData('https://omni-base.netlify.app/js/house.js'),
        fetchData('https://omni-base.netlify.app/js/apartments.js')
    ]).then(([houseData, apartmentData]) => {
        houses = houseData;
        apartments = apartmentData;
        isDataLoaded = true;
        console.log(`[BLH Compatible] Данные загружены: ${houses.length} домов, ${apartments.length} квартир.`);

        scanAndProcess(document.body);

        // Ваше расширение уже имеет MutationObserver в content.js, который перезапускает скрипты.
        // Поэтому собственный observer здесь не нужен, чтобы избежать двойной работы.

    }).catch(error => {
        console.error("[BLH Compatible] Критическая ошибка загрузки данных:", error);
    });

})();
