// ==UserScript==
// @name         Black Log: House Helper (Extension Edition, Pro)
// @namespace    http://tampermonkey.net/
// @version      8.0
// @description  Версия для расширений: прямой fetch без прокси + MutationObserver, чистый код как у senior-разработчика :) 
// @author       You
// @match        https://logs.blackrussia.online/gslogs/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    "use strict";

    // ---------- Стили ----------
    const style = document.createElement("style");
    style.textContent = `
        .blh-info-button {
            background: linear-gradient(145deg, #0d6efd, #0a58ca);
            color: white; border: none; padding: 4px 10px; margin-left: 8px;
            font-size: 12px; border-radius: 8px; cursor: pointer;
            transition: transform .2s ease, box-shadow .2s ease;
        }
        .blh-info-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(43, 140, 255, 0.3);
        }
        .blh-modal-overlay {
            position: fixed; inset: 0; background: rgba(0,0,0,.6);
            z-index: 9999; backdrop-filter: blur(4px);
            opacity: 0; transition: opacity .3s; pointer-events: none;
        }
        .blh-modal-overlay.visible { opacity: 1; pointer-events: auto; }
        .blh-wrapper {
            position: fixed; z-index: 10000; inset: 0; display: flex;
            justify-content: center; align-items: center; padding: 16px;
        }
        .blh-modal {
            background: rgba(26,26,26,.9); color: #fff; box-shadow: 0 10px 35px rgba(0,0,0,.5);
            width: 95%; max-width: 600px; max-height: 90vh;
            overflow: hidden; display: flex; flex-direction: column;
            font-family: 'Segoe UI', sans-serif;
            border-radius: 12px; opacity: 0; transform: scale(0.95);
            transition: opacity .3s, transform .3s;
        }
        .blh-wrapper.visible .blh-modal { opacity: 1; transform: scale(1); }
        .blh-modal-header {
            display: flex; justify-content: space-between; align-items: center;
            padding: 16px 24px; border-bottom: 1px solid rgba(255,255,255,.1);
            cursor: move;
        }
        .blh-modal-title { font-size: 18px; font-weight: 600; color: #2b8cff; margin: 0; }
        .blh-modal-close {
            background: transparent; border: none; color: #ccc;
            font-size: 28px; line-height: 1; cursor: pointer;
            transition: color .2s, transform .2s;
        }
        .blh-modal-close:hover { color: #fff; transform: rotate(90deg); }
        .blh-modal-content { overflow-y: auto; padding: 24px; }
        .blh-modal-content p { margin: 0 0 14px; font-size: 1rem; line-height: 1.5; display: flex; }
        .blh-modal-content strong { color: #87ceeb; min-width: 160px; display: inline-block; }
    `;
    document.head.appendChild(style);

    // ---------- Хранилище ----------
    let houses = [];
    let apartments = [];
    let isDataLoaded = false;

    // ---------- Загрузка данных ----------
    async function fetchData(url) {
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`Ошибка загрузки: ${resp.status}`);
        const text = await resp.text();
        const arrayString = text.substring(text.indexOf("["));
        return new Function(`return ${arrayString}`)();
    }

    async function loadAllData() {
        try {
            [houses, apartments] = await Promise.all([
                fetchData("https://omni-base.netlify.app/js/house.js"),
                fetchData("https://omni-base.netlify.app/js/apartments.js")
            ]);
            isDataLoaded = true;
            console.log(`[BLH] Загружено: ${houses.length} домов, ${apartments.length} квартир.`);
        } catch (err) {
            console.error("[BLH] Ошибка загрузки:", err);
        }
    }

    // ---------- UI: модалка ----------
    function createModal(info, type) {
        const modalId = `${type}-${info.id}`;
        if (document.querySelector(`.blh-wrapper[data-id='${modalId}']`)) return;

        const overlay = document.createElement("div");
        overlay.className = "blh-modal-overlay";
        const wrapper = document.createElement("div");
        wrapper.className = "blh-wrapper";
        wrapper.dataset.id = modalId;

        const modal = document.createElement("div");
        modal.className = "blh-modal";

        const title = type === "house" ? `Дом #${info.id}` : `Квартира #${info.id}`;
        let content = "";
        if (type === "house") {
            content = `
                <p><strong>Класс:</strong> ${info.class || "Не указан"}</p>
                <p><strong>Цена:</strong> ${info.price.toLocaleString("ru-RU")} ₽</p>
                <p><strong>Гараж:</strong> ${info.garage ? "Есть" : "Нет"}</p>
                <p><strong>Мест в гараже:</strong> ${info.garageslots || 0}</p>
            `;
        } else {
            content = `
                <p><strong>Название ЖК:</strong> ${info.name || "Не указано"}</p>
                <p><strong>Класс:</strong> ${info.class || "Не указан"}</p>
                <p><strong>Цена:</strong> ${info.price.toLocaleString("ru-RU")} ₽</p>
            `;
        }

        modal.innerHTML = `
            <div class="blh-modal-header">
                <h3 class="blh-modal-title">${title}</h3>
                <button class="blh-modal-close" aria-label="Закрыть">&times;</button>
            </div>
            <div class="blh-modal-content">${content}</div>
        `;
        wrapper.appendChild(modal);
        document.body.appendChild(overlay);
        document.body.appendChild(wrapper);

        requestAnimationFrame(() => {
            overlay.classList.add("visible");
            wrapper.classList.add("visible");
        });

        const closeModal = () => {
            wrapper.classList.remove("visible");
            overlay.classList.remove("visible");
            wrapper.addEventListener("transitionend", () => {
                wrapper.remove();
                overlay.remove();
            }, { once: true });
        };
        overlay.addEventListener("click", closeModal);
        modal.querySelector(".blh-modal-close").addEventListener("click", closeModal);

        // drag’n’drop
        const header = modal.querySelector(".blh-modal-header");
        let isDragging = false, startX, startY;
        header.addEventListener("mousedown", e => {
            if (e.target.closest(".blh-modal-close")) return;
            const rect = wrapper.getBoundingClientRect();
            startX = e.clientX - rect.left;
            startY = e.clientY - rect.top;
            isDragging = true;
            wrapper.style.position = "absolute";
        });
        document.addEventListener("mousemove", e => {
            if (!isDragging) return;
            wrapper.style.left = `${e.clientX - startX}px`;
            wrapper.style.top = `${e.clientY - startY}px`;
            wrapper.style.transform = "none";
        });
        document.addEventListener("mouseup", () => isDragging = false);
    }

    // ---------- Логика кнопок ----------
    function processCell(td) {
        if (td.getAttribute("data-blh-processed")) return;
        td.setAttribute("data-blh-processed", "true");

        if (!isDataLoaded) return;

        const propertyRegex = /(дом|квартира) \(sql: (\d+)\)/g;
        const matches = [...td.innerHTML.matchAll(propertyRegex)];
        const unique = new Map();

        matches.forEach(m => {
            const type = m[1] === "дом" ? "house" : "apartment";
            const sqlId = parseInt(m[2], 10);
            unique.set(m[0], { type, sqlId });
        });

        unique.forEach(({ type, sqlId }) => {
            if (td.querySelector(`.blh-info-button[data-id='${sqlId}']`)) return;
            const btn = document.createElement("button");
            btn.className = "blh-info-button";
            btn.dataset.id = sqlId;
            btn.textContent = `Инфо #${sqlId}`;
            btn.onclick = e => {
                e.stopPropagation();
                const dataArr = type === "house" ? houses : apartments;
                const info = dataArr.find(x => x.id === sqlId);
                if (info) createModal(info, type);
                else alert(`Нет данных для ID ${sqlId}`);
            };
            td.appendChild(btn);
        });
    }

    // ---------- MutationObserver ----------
    function observeTable() {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(m => {
                m.addedNodes.forEach(node => {
                    if (node.nodeType === 1 && node.matches("td")) {
                        processCell(node);
                    } else if (node.nodeType === 1) {
                        node.querySelectorAll("td").forEach(processCell);
                    }
                });
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
        document.querySelectorAll("td").forEach(processCell);
    }

    // ---------- Запуск ----------
    console.log("[BLH] Скрипт активирован, загружаем данные...");
    loadAllData().then(observeTable);

})();
