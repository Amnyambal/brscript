// ==UserScript==
// @name         Black Log: House Helper (GitHub JSON версия)
// @namespace    http://tampermonkey.net/
// @version      8.0
// @description  Загружает данные о домах и квартирах напрямую с GitHub Pages (CORS-friendly).
// @author       You
// @match        https://logs.blackrussia.online/gslogs/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    // --- 1. Стили ---
    function addStyle(css) {
        const style = document.createElement('style');
        style.textContent = css;
        document.head.appendChild(style);
    }

    addStyle(`
        .blh-info-button {
            background: linear-gradient(145deg, #0d6efd, #0a58ca);
            color: white;
            border: none;
            padding: 4px 10px;
            margin-left: 8px;
            font-size: 12px;
            border-radius: 8px;
            cursor: pointer;
        }
        .blh-info-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(43, 140, 255, 0.3);
        }
        .blh-modal-overlay {
            position: fixed; inset: 0;
            background: rgba(0,0,0,.6);
            z-index: 9999;
        }
        .blh-modal {
            background: #1a1a1a;
            color: #fff;
            border-radius: 12px;
            max-width: 600px;
            margin: 10% auto;
            padding: 20px;
            box-shadow: 0 10px 35px rgba(0,0,0,.5);
            font-family: 'Segoe UI', sans-serif;
        }
        .blh-modal h3 { margin-top: 0; color: #2b8cff; }
        .blh-modal p { margin: 8px 0; }
        .blh-modal-close {
            float: right;
            background: none;
            border: none;
            font-size: 24px;
            color: #ccc;
            cursor: pointer;
        }
        .blh-modal-close:hover { color: #fff; }
    `);

    // --- 2. Данные ---
    let houses = [];
    let apartments = [];
    let isDataLoaded = false;

    async function fetchData(url) {
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`Ошибка загрузки: ${resp.status}`);
        return await resp.json();
    }

    // --- 3. UI ---
    function createModal(info, type) {
        const overlay = document.createElement("div");
        overlay.className = "blh-modal-overlay";

        const modal = document.createElement("div");
        modal.className = "blh-modal";

        const closeBtn = document.createElement("button");
        closeBtn.className = "blh-modal-close";
        closeBtn.innerHTML = "&times;";
        closeBtn.onclick = () => overlay.remove();

        const title = document.createElement("h3");
        title.textContent = type === "house" ? `Дом #${info.id}` : `Квартира #${info.id}`;

        modal.appendChild(closeBtn);
        modal.appendChild(title);

        if (type === "house") {
            modal.innerHTML += `
                <p><strong>Локация:</strong> ${info.location || '—'}</p>
                <p><strong>Класс:</strong> ${info.type || '—'}</p>
                <p><strong>Цена:</strong> ${info.price || '—'}</p>
                <p><strong>Гараж:</strong> ${info.garage || '—'}</p>
            `;
        } else {
            modal.innerHTML += `
                <p><strong>Название ЖК:</strong> ${info.name || '—'}</p>
                <p><strong>Класс:</strong> ${info.class || '—'}</p>
                <p><strong>Цена:</strong> ${info.price || '—'}</p>
            `;
        }

        overlay.appendChild(modal);
        document.body.appendChild(overlay);

        overlay.addEventListener("click", e => {
            if (e.target === overlay) overlay.remove();
        });
    }

    // --- 4. Основная логика ---
    function attachHouseButtons() {
        if (!isDataLoaded) return;

        const propertyRegex = /(дом|квартира) \(sql: (\d+)\)/g;

        document.querySelectorAll('td:not([data-blh-processed])').forEach(td => {
            if (td.textContent.includes(' (sql: ')) {
                const matches = [...td.innerHTML.matchAll(propertyRegex)];
                const uniqueProperties = new Map();

                matches.forEach(match => {
                    const type = match[1] === 'дом' ? 'house' : 'apartment';
                    const sqlId = parseInt(match[2], 10);
                    uniqueProperties.set(sqlId, type);
                });

                uniqueProperties.forEach((type, sqlId) => {
                    if (td.querySelector(`.blh-info-button[data-id='${sqlId}']`)) return;

                    const btn = document.createElement('button');
                    btn.className = 'blh-info-button';
                    btn.dataset.id = sqlId;
                    btn.textContent = `Инфо #${sqlId}`;

                    btn.onclick = e => {
                        e.stopPropagation();
                        const dataArray = type === 'house' ? houses : apartments;
                        const info = dataArray.find(item => item.id === sqlId);
                        if (info) {
                            createModal(info, type);
                        } else {
                            alert(`Информация для ID ${sqlId} не найдена.`);
                        }
                    };

                    td.appendChild(btn);
                });
            }
            td.setAttribute("data-blh-processed", "true");
        });
    }

    // --- 5. Инициализация ---
    console.log("[BLH] Скрипт активирован, загружаем данные...");

    Promise.all([
        fetchData("https://amnyambal.github.io/brscript/house.json"),
        fetchData("https://amnyambal.github.io/brscript/apartments.json")
    ]).then(([houseData, apartmentData]) => {
        houses = houseData;
        apartments = apartmentData;
        isDataLoaded = true;
        console.log(`[BLH] Данные загружены: ${houses.length} домов, ${apartments.length} квартир.`);
        attachHouseButtons();
        setInterval(attachHouseButtons, 1500);
    }).catch(error => {
        console.error("[BLH] Ошибка загрузки:", error);
        alert("Не удалось загрузить данные о недвижимости. Проверь доступность JSON на GitHub Pages.");
    });

})();
